<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jquery/1.6.2/jquery.min.js"></script>
<script type="text/javascript" src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.15/jquery-ui.min.js"></script>
<script type="text/javascript" src="<%= url("/jasmine/jasmine.js") %>"></script>
<script type="text/javascript" src="<%= url("/jasmine/jasmine-html.js") %>"></script>
<script type="text/javascript" src="<%= url("/resources/evergreen.js") %>"></script>
<% @jammit_files.each do |file| %>
  <script type="text/javascript" src="<%= url(file)%>?now=<%= Time.now.to_i%>"></script>
<% end %>
<script type="text/javascript">
  // <![CDATA[
    <% begin %>
      <%= @js_spec_helper.read.to_s + ";" if @js_spec_helper.exist? %>
      <%= @coffee_spec_helper.read.to_s + ";" if @coffee_spec_helper.exist? %>
      <%= @spec.read %>;
    <% rescue StandardError => e %>
      describe("failure", function() {
        it("should not fail", function() {
          throw(<%= "#{e.class}: #{e.message}".to_json %>);
        });
      });
    <% end %>
  // ]]>
</script>

<div id="page">
  <h1>Evergreen</h1>
  <a class="back" href="<%= url("/") %>">Back to list</a>
</div>

<div id="test"></div>

<script type="text/javascript">
  // <![CDATA[
    (function() {
      Evergreen.driver = <%= Evergreen.driver.to_json %>;
      <% @suite.templates.each do |template| %>
        Evergreen.templates[<%= template.name.to_json %>] = <%= template.escaped_contents %>;
      <% end %>
      var jasmineEnv = jasmine.getEnv();
      var trivialReporter = new jasmine.TrivialReporter()
      jasmineEnv.addReporter(trivialReporter);
      jasmineEnv.addReporter(new Evergreen.ReflectiveReporter());

      // jasmine default is to run 'skipped' tests and just hide results
      // which is annoying when you're trying to debug an individual test
      // this goes through and recursively neuters the tests themselves
      // -NS
      var params = trivialReporter.getLocation().search.substring(1).split('&');
      var paramMap = {}
      for (var i = 0; i < params.length; i++) {
        var p = params[i].split('=');
        paramMap[decodeURIComponent(p[0])] = decodeURIComponent(p[1]);
      }
      spec_name = paramMap['spec'];
      if( spec_name ) {
        runner = jasmineEnv.currentRunner();
        function neuterSpec(block) {
          // if this is a 'describe' or an 'it'
          if( block.queue ) {
            // if full spec name matches parameter, don't traverse children
            if( block.getFullName && block.getFullName() == spec_name ) return;

            // otherwise continue down the tree
            for( var i = 0; i < block.queue.blocks.length; i++ )
              neuterSpec(block.queue.blocks[i]);
          }

          // if this is the child of an 'it', neuter the test
          else {
            block.func = function() {}
          }
        }
        neuterSpec(runner)
      }
      jasmineEnv.execute();
    })();
  // ]]>
</script>
